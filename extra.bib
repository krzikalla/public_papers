@online{has.denorm.loss.cppreference,
    author = {User:Cubbi},
    title = {{std::numeric\_limits<T>::has\_denorm\_loss - cppreference.com}},
    url = {https://en.cppreference.com/w/cpp/types/numeric_limits/has_denorm_loss},
    year = {2021},
    urldate = {2022-07-05}
}
@online{ODwyerBartonNackman,
    author = {Arthur O'Dwyer},
    title = {{An example of the Barton–Nackman trick}},
    url = {https://quuxplusone.github.io/blog/2020/12/09/barton-nackman-in-practice/},
    year = {2020},
    urldate = {2022-05-30}
}
@manual{XeonPhi2012,
    abstract = {This document describes new vector instructions for the Intel® Xeon PhiTM coprocessor.},
    organization = {Intel Corporation},
    title = {{Intel® Xeon Phi™ Coprocessor Instruction Set Architecture Reference Manual}},
    year = {2012}
}
@phdthesis{Kretz2015,
  abstract = {Data-parallel programming is more important than ever since
    serial performance is stagnating. All mainstream computing architectures have
      been and are still enhancing their support for general purpose computing with
      explicitly data-parallel execution. For CPUs, data-parallel execution is
      implemented via SIMD instructions and registers. GPU hardware works very
      similar allowing very efficient parallel processing of wide data streams with
      a common instruction stream. These advances in parallel hardware have not been
      accompanied by the necessary advances in established programming languages.
      Developers have thus not been enabled to explicitly state the data-parallelism
      inherent in their algorithms. Some approaches of GPU and CPU vendors have
      introduced new programming languages, language extensions, or dialects
      enabling explicit data-parallel programming. ...},
  author = {Kretz, Matthias},
  hdsurl = {https://hds.hebis.de/ubffm/Record/HEB366553658},
  keywords = {C++, SIMD, data parallel, parallel programming, vectorization},
  note = {Frankfurt (Main), Univ.},
  title = {Extending C++ for Explicit Data-Parallel Programming via SIMD Vector Types},
  uniqueid = {HEB366553658},
  url = {http://publikationen.ub.uni-frankfurt.de/frontdoor/index/index/docId/38415},
  doi = {10.13140/RG.2.1.2355.4323},
  year = 2015
}
@online{Intel.Cilk.Array,
    organization = {Intel Corporation},
    title = {{Tutorial: Array Notation | Cilk Plus}},
    url = {https://www.cilkplus.org/tutorial-array-notation},
    urldate = {2014-01-11}
}
@online{StrFaq,
  author = {Stroustrup, Bjarne},
  title = {{Stroustrup: C++ Style and Technique FAQ}},
  url = {http://www.stroustrup.com/bs_faq2.html#overload-dot},
  urldate = {2018-01-31},
}
@online{site.bounded-integer,
  author = {Stone, David},
  title = {{davidstone / bounded\_integer --- Bitbucket}},
  url = {https://bitbucket.org/davidstone/bounded_integer},
  urldate = {2018-02-26},
}
@misc{spec.opencl1.1,
author = {{Khronos OpenCL Working Group}},
file = {:home/mkretz/Dokumente/Mendeley/Khronos OpenCL Working Group - 2011 - The OpenCL Specification.pdf:pdf},
keywords = {Compiler,Multithreading,OpenCL,SIMD,Standard},
mendeley-tags = {Compiler,Multithreading,OpenCL,SIMD,Standard},
month = jan,
pages = {385},
title = {{The OpenCL Specification}},
url = {http://www.khronos.org/registry/cl/specs/opencl-1.1.pdf},
year = {2011}
}
@misc{WG14N2993,
    shorthand = {N2993},
    author = {Tydeman, Fred},
    howpublished = {ISO/IEC C Standards Committee Paper},
    title = {{N2993: Make *\_HAS\_SUBNORM be obsolescent}},
    url = {https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2993.htm},
    year = {2022}
}
